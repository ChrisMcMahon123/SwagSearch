{"ast":null,"code":"import _classCallCheck from \"/home/chris/Western-Hacks/swag-search/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/chris/Western-Hacks/swag-search/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/chris/Western-Hacks/swag-search/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/home/chris/Western-Hacks/swag-search/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/chris/Western-Hacks/swag-search/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\n\nvar MyMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyMap, _Component);\n\n  function MyMap(props) {\n    var _this;\n\n    _classCallCheck(this, MyMap);\n\n    // Initialize the viewport to the one provided in props\n    _this.state = {\n      viewport: props.viewport\n    };\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(MyMap, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var viewport = _ref.viewport;\n\n      // When the provided viewport changes, apply it\n      if (viewport !== this.props.viewport) {\n        this.setState({\n          viewport: viewport\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Map, {\n        onClick: this.onClickReset,\n        onViewportChanged: this.onViewportChanged,\n        viewport: this.state.viewport,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"...\");\n    }\n  }]);\n\n  return MyMap;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["/home/chris/Western-Hacks/swag-search/src/components/Map.jsx"],"names":["React","Component","MyMap","props","state","viewport","setState","onClickReset","onViewportChanged","Map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAeMC,K;;;;;AACJ,iBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAEF,KAAK,CAACE;AADL,KAAb;AAFwB;AAKzB;;;;oDAE8C;AAAA,UAAnBA,QAAmB,QAAnBA,QAAmB;;AAC7C;AACA,UAAIA,QAAQ,KAAK,KAAKF,KAAL,CAAWE,QAA5B,EAAsC;AACpC,aAAKC,QAAL,CAAc;AAAED,UAAAA,QAAQ,EAARA;AAAF,SAAd;AACD;AACF;;;6BAYQ;AACP,aACE,oBAAC,GAAD;AACE,QAAA,OAAO,EAAE,KAAKE,YADhB;AAEE,QAAA,iBAAiB,EAAE,KAAKC,iBAF1B;AAGE,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWC,QAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;AASD;;;;EAnCiBJ,S;;AAsCpB,eAAeQ,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\ntype Viewport = {\n  center: [number, number],\n  zoom: number\n};\n\ntype Props = {\n  viewport: Viewport\n};\n\ntype State = {\n  viewport: Viewport\n};\n\nclass MyMap extends Component {\n  constructor(props: Props) {\n    // Initialize the viewport to the one provided in props\n    this.state = {\n      viewport: props.viewport\n    };\n  }\n\n  componentWillReceiveProps({ viewport }: Props) {\n    // When the provided viewport changes, apply it\n    if (viewport !== this.props.viewport) {\n      this.setState({ viewport });\n    }\n  }\n\n  onClickReset = () => {\n    // Reset to position provided in props\n    this.setState({ viewport: this.props.viewport });\n  };\n\n  onViewportChanged = (viewport: Viewport) => {\n    // The viewport got changed by the user, keep track in state\n    this.setState({ viewport });\n  };\n\n  render() {\n    return (\n      <Map\n        onClick={this.onClickReset}\n        onViewportChanged={this.onViewportChanged}\n        viewport={this.state.viewport}\n      >\n        ...\n      </Map>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}