{"ast":null,"code":"'use strict';\n\nvar Response = require('http-response-object');\n\nvar handleQs = require('then-request/lib/handle-qs.js');\n\nmodule.exports = doRequest;\n\nfunction doRequest(method, url, options) {\n  var xhr = new XMLHttpRequest(); // check types of arguments\n\n  if (typeof method !== 'string') {\n    throw new TypeError('The method must be a string.');\n  }\n\n  if (typeof url !== 'string') {\n    throw new TypeError('The URL/path must be a string.');\n  }\n\n  if (options === null || options === undefined) {\n    options = {};\n  }\n\n  if (typeof options !== 'object') {\n    throw new TypeError('Options must be an object (or null).');\n  }\n\n  method = method.toUpperCase();\n  options.headers = options.headers || {}; // handle cross domain\n\n  var match;\n  var crossDomain = !!((match = /^([\\w-]+:)?\\/\\/([^\\/]+)/.exec(options.uri)) && match[2] != location.host);\n  if (!crossDomain) options.headers['X-Requested-With'] = 'XMLHttpRequest'; // handle query string\n\n  if (options.qs) {\n    url = handleQs(url, options.qs);\n  } // handle json body\n\n\n  if (options.json) {\n    options.body = JSON.stringify(options.json);\n    options.headers['content-type'] = 'application/json';\n  } // method, url, async\n\n\n  xhr.open(method, url, false);\n\n  for (var name in options.headers) {\n    xhr.setRequestHeader(name.toLowerCase(), options.headers[name]);\n  } // avoid sending empty string (#319)\n\n\n  xhr.send(options.body ? options.body : null);\n  var headers = {};\n  xhr.getAllResponseHeaders().split('\\r\\n').forEach(function (header) {\n    var h = header.split(':');\n\n    if (h.length > 1) {\n      headers[h[0].toLowerCase()] = h.slice(1).join(':').trim();\n    }\n  });\n  return new Response(xhr.status, headers, xhr.responseText);\n}","map":null,"metadata":{},"sourceType":"script"}